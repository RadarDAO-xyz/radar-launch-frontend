// Generated by @wagmi/cli@1.3.0 on 9/4/2023 at 7:29:56 PM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi';
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions';

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RadarEditions
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const radarEditionsABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  { type: 'error', inputs: [], name: 'EditionFeeExceedsMaximumFee' },
  { type: 'error', inputs: [], name: 'EditionNotCreated' },
  { type: 'error', inputs: [], name: 'EditionNotEnoughBalance' },
  { type: 'error', inputs: [], name: 'EditionNotLaunched' },
  { type: 'error', inputs: [], name: 'EditionNotStopped' },
  { type: 'error', inputs: [], name: 'NotCorrectUser' },
  { type: 'error', inputs: [], name: 'NotEditionOwner' },
  { type: 'error', inputs: [], name: 'NotEnoughFees' },
  { type: 'error', inputs: [], name: 'NotEnoughFunds' },
  { type: 'error', inputs: [], name: 'TransactionFailed' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'editionId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'EditionApproved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'editionId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'EditionBalanceWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'editionId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'believer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'EditionBeliefRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'editionId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'believer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'tags', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'EditionBelieved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'editionId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'fee', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'EditionCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'editionId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'EditionResumed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'editionId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'EditionStopped',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Paused',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'previousAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'newAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'ids',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: 'values',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'TransferBatch',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TransferSingle',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'value', internalType: 'string', type: 'string', indexed: false },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'URI',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Unpaused',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  { stateMutability: 'payable', type: 'fallback' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'editionId', internalType: 'uint256', type: 'uint256' }],
    name: 'approveEdition',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accounts', internalType: 'address[]', type: 'address[]' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'balanceOfBatch',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'editionId', internalType: 'uint256', type: 'uint256' },
      { name: 'tags', internalType: 'string', type: 'string' },
    ],
    name: 'believeProject',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'burnBatch',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'contractURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'fee', internalType: 'uint256', type: 'uint256' },
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'payer', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'string', type: 'string' },
    ],
    name: 'createEdition',
    outputs: [{ name: 'editionId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'editionCounter',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'editions',
    outputs: [
      {
        name: 'status',
        internalType: 'enum EditionsStructs.EditionStatus',
        type: 'uint8',
      },
      { name: 'fee', internalType: 'uint256', type: 'uint256' },
      { name: 'balance', internalType: 'uint256', type: 'uint256' },
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'exists',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'getBalances',
    outputs: [
      {
        name: '',
        internalType: 'struct EditionsStructs.EditionIdWithAmount[]',
        type: 'tuple[]',
        components: [
          { name: 'id', internalType: 'string', type: 'string' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEditions',
    outputs: [
      {
        name: '',
        internalType: 'struct EditionsStructs.Edition[]',
        type: 'tuple[]',
        components: [
          {
            name: 'status',
            internalType: 'enum EditionsStructs.EditionStatus',
            type: 'uint8',
          },
          { name: 'fee', internalType: 'uint256', type: 'uint256' },
          { name: 'balance', internalType: 'uint256', type: 'uint256' },
          { name: 'owner', internalType: 'address', type: 'address' },
          { name: 'id', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maximumEditionFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'editionId', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'buyer', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'mintEdition',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'pause',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'protocolFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'editionId', internalType: 'uint256', type: 'uint256' }],
    name: 'removeBelief',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'editionId', internalType: 'uint256', type: 'uint256' }],
    name: 'resumeEdition',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeBatchTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_maximumEditionFee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMaximumEditionFee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_protocolFee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setProtocolFee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newuri', internalType: 'string', type: 'string' }],
    name: 'setURI',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'editionId', internalType: 'uint256', type: 'uint256' }],
    name: 'stopEdition',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'unpause',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'uri',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'editionId', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawEditionBalance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'withdrawFunds',
    outputs: [],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link radarEditionsABI}__.
 */
export function useRadarEditionsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof radarEditionsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof radarEditionsABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: radarEditionsABI,
    ...config,
  } as UseContractReadConfig<
    typeof radarEditionsABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useRadarEditionsDefaultAdminRole<
  TFunctionName extends 'DEFAULT_ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof radarEditionsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof radarEditionsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: radarEditionsABI,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config,
  } as UseContractReadConfig<
    typeof radarEditionsABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useRadarEditionsBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof radarEditionsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof radarEditionsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: radarEditionsABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof radarEditionsABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"balanceOfBatch"`.
 */
export function useRadarEditionsBalanceOfBatch<
  TFunctionName extends 'balanceOfBatch',
  TSelectData = ReadContractResult<typeof radarEditionsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof radarEditionsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: radarEditionsABI,
    functionName: 'balanceOfBatch',
    ...config,
  } as UseContractReadConfig<
    typeof radarEditionsABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"contractURI"`.
 */
export function useRadarEditionsContractUri<
  TFunctionName extends 'contractURI',
  TSelectData = ReadContractResult<typeof radarEditionsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof radarEditionsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: radarEditionsABI,
    functionName: 'contractURI',
    ...config,
  } as UseContractReadConfig<
    typeof radarEditionsABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"editionCounter"`.
 */
export function useRadarEditionsEditionCounter<
  TFunctionName extends 'editionCounter',
  TSelectData = ReadContractResult<typeof radarEditionsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof radarEditionsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: radarEditionsABI,
    functionName: 'editionCounter',
    ...config,
  } as UseContractReadConfig<
    typeof radarEditionsABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"editions"`.
 */
export function useRadarEditionsEditions<
  TFunctionName extends 'editions',
  TSelectData = ReadContractResult<typeof radarEditionsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof radarEditionsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: radarEditionsABI,
    functionName: 'editions',
    ...config,
  } as UseContractReadConfig<
    typeof radarEditionsABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"exists"`.
 */
export function useRadarEditionsExists<
  TFunctionName extends 'exists',
  TSelectData = ReadContractResult<typeof radarEditionsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof radarEditionsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: radarEditionsABI,
    functionName: 'exists',
    ...config,
  } as UseContractReadConfig<
    typeof radarEditionsABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"getBalances"`.
 */
export function useRadarEditionsGetBalances<
  TFunctionName extends 'getBalances',
  TSelectData = ReadContractResult<typeof radarEditionsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof radarEditionsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: radarEditionsABI,
    functionName: 'getBalances',
    ...config,
  } as UseContractReadConfig<
    typeof radarEditionsABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"getEditions"`.
 */
export function useRadarEditionsGetEditions<
  TFunctionName extends 'getEditions',
  TSelectData = ReadContractResult<typeof radarEditionsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof radarEditionsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: radarEditionsABI,
    functionName: 'getEditions',
    ...config,
  } as UseContractReadConfig<
    typeof radarEditionsABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useRadarEditionsGetRoleAdmin<
  TFunctionName extends 'getRoleAdmin',
  TSelectData = ReadContractResult<typeof radarEditionsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof radarEditionsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: radarEditionsABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<
    typeof radarEditionsABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"hasRole"`.
 */
export function useRadarEditionsHasRole<
  TFunctionName extends 'hasRole',
  TSelectData = ReadContractResult<typeof radarEditionsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof radarEditionsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: radarEditionsABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<
    typeof radarEditionsABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useRadarEditionsIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof radarEditionsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof radarEditionsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: radarEditionsABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof radarEditionsABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"maximumEditionFee"`.
 */
export function useRadarEditionsMaximumEditionFee<
  TFunctionName extends 'maximumEditionFee',
  TSelectData = ReadContractResult<typeof radarEditionsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof radarEditionsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: radarEditionsABI,
    functionName: 'maximumEditionFee',
    ...config,
  } as UseContractReadConfig<
    typeof radarEditionsABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"paused"`.
 */
export function useRadarEditionsPaused<
  TFunctionName extends 'paused',
  TSelectData = ReadContractResult<typeof radarEditionsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof radarEditionsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: radarEditionsABI,
    functionName: 'paused',
    ...config,
  } as UseContractReadConfig<
    typeof radarEditionsABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"protocolFee"`.
 */
export function useRadarEditionsProtocolFee<
  TFunctionName extends 'protocolFee',
  TSelectData = ReadContractResult<typeof radarEditionsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof radarEditionsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: radarEditionsABI,
    functionName: 'protocolFee',
    ...config,
  } as UseContractReadConfig<
    typeof radarEditionsABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useRadarEditionsProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof radarEditionsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof radarEditionsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: radarEditionsABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<
    typeof radarEditionsABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useRadarEditionsSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof radarEditionsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof radarEditionsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: radarEditionsABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof radarEditionsABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useRadarEditionsTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof radarEditionsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof radarEditionsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: radarEditionsABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof radarEditionsABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"uri"`.
 */
export function useRadarEditionsUri<
  TFunctionName extends 'uri',
  TSelectData = ReadContractResult<typeof radarEditionsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof radarEditionsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: radarEditionsABI,
    functionName: 'uri',
    ...config,
  } as UseContractReadConfig<
    typeof radarEditionsABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link radarEditionsABI}__.
 */
export function useRadarEditionsWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof radarEditionsABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof radarEditionsABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof radarEditionsABI, TFunctionName, TMode>({
    abi: radarEditionsABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"approveEdition"`.
 */
export function useRadarEditionsApproveEdition<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof radarEditionsABI,
          'approveEdition'
        >['request']['abi'],
        'approveEdition',
        TMode
      > & { functionName?: 'approveEdition' }
    : UseContractWriteConfig<
        typeof radarEditionsABI,
        'approveEdition',
        TMode
      > & {
        abi?: never;
        functionName?: 'approveEdition';
      } = {} as any,
) {
  return useContractWrite<typeof radarEditionsABI, 'approveEdition', TMode>({
    abi: radarEditionsABI,
    functionName: 'approveEdition',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"believeProject"`.
 */
export function useRadarEditionsBelieveProject<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof radarEditionsABI,
          'believeProject'
        >['request']['abi'],
        'believeProject',
        TMode
      > & { functionName?: 'believeProject' }
    : UseContractWriteConfig<
        typeof radarEditionsABI,
        'believeProject',
        TMode
      > & {
        abi?: never;
        functionName?: 'believeProject';
      } = {} as any,
) {
  return useContractWrite<typeof radarEditionsABI, 'believeProject', TMode>({
    abi: radarEditionsABI,
    functionName: 'believeProject',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"burn"`.
 */
export function useRadarEditionsBurn<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof radarEditionsABI,
          'burn'
        >['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof radarEditionsABI, 'burn', TMode> & {
        abi?: never;
        functionName?: 'burn';
      } = {} as any,
) {
  return useContractWrite<typeof radarEditionsABI, 'burn', TMode>({
    abi: radarEditionsABI,
    functionName: 'burn',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"burnBatch"`.
 */
export function useRadarEditionsBurnBatch<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof radarEditionsABI,
          'burnBatch'
        >['request']['abi'],
        'burnBatch',
        TMode
      > & { functionName?: 'burnBatch' }
    : UseContractWriteConfig<typeof radarEditionsABI, 'burnBatch', TMode> & {
        abi?: never;
        functionName?: 'burnBatch';
      } = {} as any,
) {
  return useContractWrite<typeof radarEditionsABI, 'burnBatch', TMode>({
    abi: radarEditionsABI,
    functionName: 'burnBatch',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"createEdition"`.
 */
export function useRadarEditionsCreateEdition<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof radarEditionsABI,
          'createEdition'
        >['request']['abi'],
        'createEdition',
        TMode
      > & { functionName?: 'createEdition' }
    : UseContractWriteConfig<
        typeof radarEditionsABI,
        'createEdition',
        TMode
      > & {
        abi?: never;
        functionName?: 'createEdition';
      } = {} as any,
) {
  return useContractWrite<typeof radarEditionsABI, 'createEdition', TMode>({
    abi: radarEditionsABI,
    functionName: 'createEdition',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"grantRole"`.
 */
export function useRadarEditionsGrantRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof radarEditionsABI,
          'grantRole'
        >['request']['abi'],
        'grantRole',
        TMode
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<typeof radarEditionsABI, 'grantRole', TMode> & {
        abi?: never;
        functionName?: 'grantRole';
      } = {} as any,
) {
  return useContractWrite<typeof radarEditionsABI, 'grantRole', TMode>({
    abi: radarEditionsABI,
    functionName: 'grantRole',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"initialize"`.
 */
export function useRadarEditionsInitialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof radarEditionsABI,
          'initialize'
        >['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof radarEditionsABI, 'initialize', TMode> & {
        abi?: never;
        functionName?: 'initialize';
      } = {} as any,
) {
  return useContractWrite<typeof radarEditionsABI, 'initialize', TMode>({
    abi: radarEditionsABI,
    functionName: 'initialize',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"mintEdition"`.
 */
export function useRadarEditionsMintEdition<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof radarEditionsABI,
          'mintEdition'
        >['request']['abi'],
        'mintEdition',
        TMode
      > & { functionName?: 'mintEdition' }
    : UseContractWriteConfig<typeof radarEditionsABI, 'mintEdition', TMode> & {
        abi?: never;
        functionName?: 'mintEdition';
      } = {} as any,
) {
  return useContractWrite<typeof radarEditionsABI, 'mintEdition', TMode>({
    abi: radarEditionsABI,
    functionName: 'mintEdition',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"pause"`.
 */
export function useRadarEditionsPause<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof radarEditionsABI,
          'pause'
        >['request']['abi'],
        'pause',
        TMode
      > & { functionName?: 'pause' }
    : UseContractWriteConfig<typeof radarEditionsABI, 'pause', TMode> & {
        abi?: never;
        functionName?: 'pause';
      } = {} as any,
) {
  return useContractWrite<typeof radarEditionsABI, 'pause', TMode>({
    abi: radarEditionsABI,
    functionName: 'pause',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"removeBelief"`.
 */
export function useRadarEditionsRemoveBelief<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof radarEditionsABI,
          'removeBelief'
        >['request']['abi'],
        'removeBelief',
        TMode
      > & { functionName?: 'removeBelief' }
    : UseContractWriteConfig<typeof radarEditionsABI, 'removeBelief', TMode> & {
        abi?: never;
        functionName?: 'removeBelief';
      } = {} as any,
) {
  return useContractWrite<typeof radarEditionsABI, 'removeBelief', TMode>({
    abi: radarEditionsABI,
    functionName: 'removeBelief',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useRadarEditionsRenounceRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof radarEditionsABI,
          'renounceRole'
        >['request']['abi'],
        'renounceRole',
        TMode
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<typeof radarEditionsABI, 'renounceRole', TMode> & {
        abi?: never;
        functionName?: 'renounceRole';
      } = {} as any,
) {
  return useContractWrite<typeof radarEditionsABI, 'renounceRole', TMode>({
    abi: radarEditionsABI,
    functionName: 'renounceRole',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"resumeEdition"`.
 */
export function useRadarEditionsResumeEdition<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof radarEditionsABI,
          'resumeEdition'
        >['request']['abi'],
        'resumeEdition',
        TMode
      > & { functionName?: 'resumeEdition' }
    : UseContractWriteConfig<
        typeof radarEditionsABI,
        'resumeEdition',
        TMode
      > & {
        abi?: never;
        functionName?: 'resumeEdition';
      } = {} as any,
) {
  return useContractWrite<typeof radarEditionsABI, 'resumeEdition', TMode>({
    abi: radarEditionsABI,
    functionName: 'resumeEdition',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useRadarEditionsRevokeRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof radarEditionsABI,
          'revokeRole'
        >['request']['abi'],
        'revokeRole',
        TMode
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<typeof radarEditionsABI, 'revokeRole', TMode> & {
        abi?: never;
        functionName?: 'revokeRole';
      } = {} as any,
) {
  return useContractWrite<typeof radarEditionsABI, 'revokeRole', TMode>({
    abi: radarEditionsABI,
    functionName: 'revokeRole',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function useRadarEditionsSafeBatchTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof radarEditionsABI,
          'safeBatchTransferFrom'
        >['request']['abi'],
        'safeBatchTransferFrom',
        TMode
      > & { functionName?: 'safeBatchTransferFrom' }
    : UseContractWriteConfig<
        typeof radarEditionsABI,
        'safeBatchTransferFrom',
        TMode
      > & {
        abi?: never;
        functionName?: 'safeBatchTransferFrom';
      } = {} as any,
) {
  return useContractWrite<
    typeof radarEditionsABI,
    'safeBatchTransferFrom',
    TMode
  >({
    abi: radarEditionsABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useRadarEditionsSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof radarEditionsABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        typeof radarEditionsABI,
        'safeTransferFrom',
        TMode
      > & {
        abi?: never;
        functionName?: 'safeTransferFrom';
      } = {} as any,
) {
  return useContractWrite<typeof radarEditionsABI, 'safeTransferFrom', TMode>({
    abi: radarEditionsABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useRadarEditionsSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof radarEditionsABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        typeof radarEditionsABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never;
        functionName?: 'setApprovalForAll';
      } = {} as any,
) {
  return useContractWrite<typeof radarEditionsABI, 'setApprovalForAll', TMode>({
    abi: radarEditionsABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"setMaximumEditionFee"`.
 */
export function useRadarEditionsSetMaximumEditionFee<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof radarEditionsABI,
          'setMaximumEditionFee'
        >['request']['abi'],
        'setMaximumEditionFee',
        TMode
      > & { functionName?: 'setMaximumEditionFee' }
    : UseContractWriteConfig<
        typeof radarEditionsABI,
        'setMaximumEditionFee',
        TMode
      > & {
        abi?: never;
        functionName?: 'setMaximumEditionFee';
      } = {} as any,
) {
  return useContractWrite<
    typeof radarEditionsABI,
    'setMaximumEditionFee',
    TMode
  >({
    abi: radarEditionsABI,
    functionName: 'setMaximumEditionFee',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"setProtocolFee"`.
 */
export function useRadarEditionsSetProtocolFee<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof radarEditionsABI,
          'setProtocolFee'
        >['request']['abi'],
        'setProtocolFee',
        TMode
      > & { functionName?: 'setProtocolFee' }
    : UseContractWriteConfig<
        typeof radarEditionsABI,
        'setProtocolFee',
        TMode
      > & {
        abi?: never;
        functionName?: 'setProtocolFee';
      } = {} as any,
) {
  return useContractWrite<typeof radarEditionsABI, 'setProtocolFee', TMode>({
    abi: radarEditionsABI,
    functionName: 'setProtocolFee',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"setURI"`.
 */
export function useRadarEditionsSetUri<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof radarEditionsABI,
          'setURI'
        >['request']['abi'],
        'setURI',
        TMode
      > & { functionName?: 'setURI' }
    : UseContractWriteConfig<typeof radarEditionsABI, 'setURI', TMode> & {
        abi?: never;
        functionName?: 'setURI';
      } = {} as any,
) {
  return useContractWrite<typeof radarEditionsABI, 'setURI', TMode>({
    abi: radarEditionsABI,
    functionName: 'setURI',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"stopEdition"`.
 */
export function useRadarEditionsStopEdition<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof radarEditionsABI,
          'stopEdition'
        >['request']['abi'],
        'stopEdition',
        TMode
      > & { functionName?: 'stopEdition' }
    : UseContractWriteConfig<typeof radarEditionsABI, 'stopEdition', TMode> & {
        abi?: never;
        functionName?: 'stopEdition';
      } = {} as any,
) {
  return useContractWrite<typeof radarEditionsABI, 'stopEdition', TMode>({
    abi: radarEditionsABI,
    functionName: 'stopEdition',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"unpause"`.
 */
export function useRadarEditionsUnpause<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof radarEditionsABI,
          'unpause'
        >['request']['abi'],
        'unpause',
        TMode
      > & { functionName?: 'unpause' }
    : UseContractWriteConfig<typeof radarEditionsABI, 'unpause', TMode> & {
        abi?: never;
        functionName?: 'unpause';
      } = {} as any,
) {
  return useContractWrite<typeof radarEditionsABI, 'unpause', TMode>({
    abi: radarEditionsABI,
    functionName: 'unpause',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useRadarEditionsUpgradeTo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof radarEditionsABI,
          'upgradeTo'
        >['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof radarEditionsABI, 'upgradeTo', TMode> & {
        abi?: never;
        functionName?: 'upgradeTo';
      } = {} as any,
) {
  return useContractWrite<typeof radarEditionsABI, 'upgradeTo', TMode>({
    abi: radarEditionsABI,
    functionName: 'upgradeTo',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useRadarEditionsUpgradeToAndCall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof radarEditionsABI,
          'upgradeToAndCall'
        >['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<
        typeof radarEditionsABI,
        'upgradeToAndCall',
        TMode
      > & {
        abi?: never;
        functionName?: 'upgradeToAndCall';
      } = {} as any,
) {
  return useContractWrite<typeof radarEditionsABI, 'upgradeToAndCall', TMode>({
    abi: radarEditionsABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"withdrawEditionBalance"`.
 */
export function useRadarEditionsWithdrawEditionBalance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof radarEditionsABI,
          'withdrawEditionBalance'
        >['request']['abi'],
        'withdrawEditionBalance',
        TMode
      > & { functionName?: 'withdrawEditionBalance' }
    : UseContractWriteConfig<
        typeof radarEditionsABI,
        'withdrawEditionBalance',
        TMode
      > & {
        abi?: never;
        functionName?: 'withdrawEditionBalance';
      } = {} as any,
) {
  return useContractWrite<
    typeof radarEditionsABI,
    'withdrawEditionBalance',
    TMode
  >({
    abi: radarEditionsABI,
    functionName: 'withdrawEditionBalance',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"withdrawFunds"`.
 */
export function useRadarEditionsWithdrawFunds<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof radarEditionsABI,
          'withdrawFunds'
        >['request']['abi'],
        'withdrawFunds',
        TMode
      > & { functionName?: 'withdrawFunds' }
    : UseContractWriteConfig<
        typeof radarEditionsABI,
        'withdrawFunds',
        TMode
      > & {
        abi?: never;
        functionName?: 'withdrawFunds';
      } = {} as any,
) {
  return useContractWrite<typeof radarEditionsABI, 'withdrawFunds', TMode>({
    abi: radarEditionsABI,
    functionName: 'withdrawFunds',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link radarEditionsABI}__.
 */
export function usePrepareRadarEditionsWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof radarEditionsABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: radarEditionsABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof radarEditionsABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"approveEdition"`.
 */
export function usePrepareRadarEditionsApproveEdition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof radarEditionsABI, 'approveEdition'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: radarEditionsABI,
    functionName: 'approveEdition',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof radarEditionsABI,
    'approveEdition'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"believeProject"`.
 */
export function usePrepareRadarEditionsBelieveProject(
  config: Omit<
    UsePrepareContractWriteConfig<typeof radarEditionsABI, 'believeProject'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: radarEditionsABI,
    functionName: 'believeProject',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof radarEditionsABI,
    'believeProject'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareRadarEditionsBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof radarEditionsABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: radarEditionsABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof radarEditionsABI, 'burn'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"burnBatch"`.
 */
export function usePrepareRadarEditionsBurnBatch(
  config: Omit<
    UsePrepareContractWriteConfig<typeof radarEditionsABI, 'burnBatch'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: radarEditionsABI,
    functionName: 'burnBatch',
    ...config,
  } as UsePrepareContractWriteConfig<typeof radarEditionsABI, 'burnBatch'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"createEdition"`.
 */
export function usePrepareRadarEditionsCreateEdition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof radarEditionsABI, 'createEdition'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: radarEditionsABI,
    functionName: 'createEdition',
    ...config,
  } as UsePrepareContractWriteConfig<typeof radarEditionsABI, 'createEdition'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareRadarEditionsGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof radarEditionsABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: radarEditionsABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof radarEditionsABI, 'grantRole'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareRadarEditionsInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof radarEditionsABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: radarEditionsABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof radarEditionsABI, 'initialize'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"mintEdition"`.
 */
export function usePrepareRadarEditionsMintEdition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof radarEditionsABI, 'mintEdition'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: radarEditionsABI,
    functionName: 'mintEdition',
    ...config,
  } as UsePrepareContractWriteConfig<typeof radarEditionsABI, 'mintEdition'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareRadarEditionsPause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof radarEditionsABI, 'pause'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: radarEditionsABI,
    functionName: 'pause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof radarEditionsABI, 'pause'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"removeBelief"`.
 */
export function usePrepareRadarEditionsRemoveBelief(
  config: Omit<
    UsePrepareContractWriteConfig<typeof radarEditionsABI, 'removeBelief'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: radarEditionsABI,
    functionName: 'removeBelief',
    ...config,
  } as UsePrepareContractWriteConfig<typeof radarEditionsABI, 'removeBelief'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareRadarEditionsRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof radarEditionsABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: radarEditionsABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof radarEditionsABI, 'renounceRole'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"resumeEdition"`.
 */
export function usePrepareRadarEditionsResumeEdition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof radarEditionsABI, 'resumeEdition'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: radarEditionsABI,
    functionName: 'resumeEdition',
    ...config,
  } as UsePrepareContractWriteConfig<typeof radarEditionsABI, 'resumeEdition'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareRadarEditionsRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof radarEditionsABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: radarEditionsABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof radarEditionsABI, 'revokeRole'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function usePrepareRadarEditionsSafeBatchTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof radarEditionsABI,
      'safeBatchTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: radarEditionsABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof radarEditionsABI,
    'safeBatchTransferFrom'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareRadarEditionsSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof radarEditionsABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: radarEditionsABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof radarEditionsABI,
    'safeTransferFrom'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareRadarEditionsSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof radarEditionsABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: radarEditionsABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof radarEditionsABI,
    'setApprovalForAll'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"setMaximumEditionFee"`.
 */
export function usePrepareRadarEditionsSetMaximumEditionFee(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof radarEditionsABI,
      'setMaximumEditionFee'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: radarEditionsABI,
    functionName: 'setMaximumEditionFee',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof radarEditionsABI,
    'setMaximumEditionFee'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"setProtocolFee"`.
 */
export function usePrepareRadarEditionsSetProtocolFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof radarEditionsABI, 'setProtocolFee'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: radarEditionsABI,
    functionName: 'setProtocolFee',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof radarEditionsABI,
    'setProtocolFee'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"setURI"`.
 */
export function usePrepareRadarEditionsSetUri(
  config: Omit<
    UsePrepareContractWriteConfig<typeof radarEditionsABI, 'setURI'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: radarEditionsABI,
    functionName: 'setURI',
    ...config,
  } as UsePrepareContractWriteConfig<typeof radarEditionsABI, 'setURI'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"stopEdition"`.
 */
export function usePrepareRadarEditionsStopEdition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof radarEditionsABI, 'stopEdition'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: radarEditionsABI,
    functionName: 'stopEdition',
    ...config,
  } as UsePrepareContractWriteConfig<typeof radarEditionsABI, 'stopEdition'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"unpause"`.
 */
export function usePrepareRadarEditionsUnpause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof radarEditionsABI, 'unpause'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: radarEditionsABI,
    functionName: 'unpause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof radarEditionsABI, 'unpause'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareRadarEditionsUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof radarEditionsABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: radarEditionsABI,
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof radarEditionsABI, 'upgradeTo'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareRadarEditionsUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof radarEditionsABI, 'upgradeToAndCall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: radarEditionsABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof radarEditionsABI,
    'upgradeToAndCall'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"withdrawEditionBalance"`.
 */
export function usePrepareRadarEditionsWithdrawEditionBalance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof radarEditionsABI,
      'withdrawEditionBalance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: radarEditionsABI,
    functionName: 'withdrawEditionBalance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof radarEditionsABI,
    'withdrawEditionBalance'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link radarEditionsABI}__ and `functionName` set to `"withdrawFunds"`.
 */
export function usePrepareRadarEditionsWithdrawFunds(
  config: Omit<
    UsePrepareContractWriteConfig<typeof radarEditionsABI, 'withdrawFunds'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: radarEditionsABI,
    functionName: 'withdrawFunds',
    ...config,
  } as UsePrepareContractWriteConfig<typeof radarEditionsABI, 'withdrawFunds'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link radarEditionsABI}__.
 */
export function useRadarEditionsEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof radarEditionsABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: radarEditionsABI,
    ...config,
  } as UseContractEventConfig<typeof radarEditionsABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link radarEditionsABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useRadarEditionsAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof radarEditionsABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: radarEditionsABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof radarEditionsABI, 'AdminChanged'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link radarEditionsABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useRadarEditionsApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof radarEditionsABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: radarEditionsABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof radarEditionsABI, 'ApprovalForAll'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link radarEditionsABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useRadarEditionsBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof radarEditionsABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: radarEditionsABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof radarEditionsABI, 'BeaconUpgraded'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link radarEditionsABI}__ and `eventName` set to `"EditionApproved"`.
 */
export function useRadarEditionsEditionApprovedEvent(
  config: Omit<
    UseContractEventConfig<typeof radarEditionsABI, 'EditionApproved'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: radarEditionsABI,
    eventName: 'EditionApproved',
    ...config,
  } as UseContractEventConfig<typeof radarEditionsABI, 'EditionApproved'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link radarEditionsABI}__ and `eventName` set to `"EditionBalanceWithdrawn"`.
 */
export function useRadarEditionsEditionBalanceWithdrawnEvent(
  config: Omit<
    UseContractEventConfig<typeof radarEditionsABI, 'EditionBalanceWithdrawn'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: radarEditionsABI,
    eventName: 'EditionBalanceWithdrawn',
    ...config,
  } as UseContractEventConfig<
    typeof radarEditionsABI,
    'EditionBalanceWithdrawn'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link radarEditionsABI}__ and `eventName` set to `"EditionBeliefRemoved"`.
 */
export function useRadarEditionsEditionBeliefRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof radarEditionsABI, 'EditionBeliefRemoved'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: radarEditionsABI,
    eventName: 'EditionBeliefRemoved',
    ...config,
  } as UseContractEventConfig<typeof radarEditionsABI, 'EditionBeliefRemoved'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link radarEditionsABI}__ and `eventName` set to `"EditionBelieved"`.
 */
export function useRadarEditionsEditionBelievedEvent(
  config: Omit<
    UseContractEventConfig<typeof radarEditionsABI, 'EditionBelieved'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: radarEditionsABI,
    eventName: 'EditionBelieved',
    ...config,
  } as UseContractEventConfig<typeof radarEditionsABI, 'EditionBelieved'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link radarEditionsABI}__ and `eventName` set to `"EditionCreated"`.
 */
export function useRadarEditionsEditionCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof radarEditionsABI, 'EditionCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: radarEditionsABI,
    eventName: 'EditionCreated',
    ...config,
  } as UseContractEventConfig<typeof radarEditionsABI, 'EditionCreated'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link radarEditionsABI}__ and `eventName` set to `"EditionResumed"`.
 */
export function useRadarEditionsEditionResumedEvent(
  config: Omit<
    UseContractEventConfig<typeof radarEditionsABI, 'EditionResumed'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: radarEditionsABI,
    eventName: 'EditionResumed',
    ...config,
  } as UseContractEventConfig<typeof radarEditionsABI, 'EditionResumed'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link radarEditionsABI}__ and `eventName` set to `"EditionStopped"`.
 */
export function useRadarEditionsEditionStoppedEvent(
  config: Omit<
    UseContractEventConfig<typeof radarEditionsABI, 'EditionStopped'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: radarEditionsABI,
    eventName: 'EditionStopped',
    ...config,
  } as UseContractEventConfig<typeof radarEditionsABI, 'EditionStopped'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link radarEditionsABI}__ and `eventName` set to `"Initialized"`.
 */
export function useRadarEditionsInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof radarEditionsABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: radarEditionsABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof radarEditionsABI, 'Initialized'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link radarEditionsABI}__ and `eventName` set to `"Paused"`.
 */
export function useRadarEditionsPausedEvent(
  config: Omit<
    UseContractEventConfig<typeof radarEditionsABI, 'Paused'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: radarEditionsABI,
    eventName: 'Paused',
    ...config,
  } as UseContractEventConfig<typeof radarEditionsABI, 'Paused'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link radarEditionsABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useRadarEditionsRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof radarEditionsABI, 'RoleAdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: radarEditionsABI,
    eventName: 'RoleAdminChanged',
    ...config,
  } as UseContractEventConfig<typeof radarEditionsABI, 'RoleAdminChanged'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link radarEditionsABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useRadarEditionsRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof radarEditionsABI, 'RoleGranted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: radarEditionsABI,
    eventName: 'RoleGranted',
    ...config,
  } as UseContractEventConfig<typeof radarEditionsABI, 'RoleGranted'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link radarEditionsABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useRadarEditionsRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof radarEditionsABI, 'RoleRevoked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: radarEditionsABI,
    eventName: 'RoleRevoked',
    ...config,
  } as UseContractEventConfig<typeof radarEditionsABI, 'RoleRevoked'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link radarEditionsABI}__ and `eventName` set to `"TransferBatch"`.
 */
export function useRadarEditionsTransferBatchEvent(
  config: Omit<
    UseContractEventConfig<typeof radarEditionsABI, 'TransferBatch'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: radarEditionsABI,
    eventName: 'TransferBatch',
    ...config,
  } as UseContractEventConfig<typeof radarEditionsABI, 'TransferBatch'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link radarEditionsABI}__ and `eventName` set to `"TransferSingle"`.
 */
export function useRadarEditionsTransferSingleEvent(
  config: Omit<
    UseContractEventConfig<typeof radarEditionsABI, 'TransferSingle'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: radarEditionsABI,
    eventName: 'TransferSingle',
    ...config,
  } as UseContractEventConfig<typeof radarEditionsABI, 'TransferSingle'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link radarEditionsABI}__ and `eventName` set to `"URI"`.
 */
export function useRadarEditionsUriEvent(
  config: Omit<
    UseContractEventConfig<typeof radarEditionsABI, 'URI'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: radarEditionsABI,
    eventName: 'URI',
    ...config,
  } as UseContractEventConfig<typeof radarEditionsABI, 'URI'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link radarEditionsABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useRadarEditionsUnpausedEvent(
  config: Omit<
    UseContractEventConfig<typeof radarEditionsABI, 'Unpaused'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: radarEditionsABI,
    eventName: 'Unpaused',
    ...config,
  } as UseContractEventConfig<typeof radarEditionsABI, 'Unpaused'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link radarEditionsABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useRadarEditionsUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof radarEditionsABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: radarEditionsABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof radarEditionsABI, 'Upgraded'>);
}
